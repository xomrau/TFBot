'use strict';

var _chai = require('chai');

var _TestUtils = require('../../../TestUtils');

var _TestUtils2 = _interopRequireDefault(_TestUtils);

var _MatchEndpoint = require('../../../../lib/Endpoints/MatchEndpoint/MatchEndpoint');

var _MatchEndpoint2 = _interopRequireDefault(_MatchEndpoint);

var _mocks = require('../../../mocks');

var _mocks2 = _interopRequireDefault(_mocks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { kaynInstance, defaultConfig } = _TestUtils2.default;

const { kayn, REGIONS, METHOD_TYPES } = kaynInstance;


describe('MatchEndpoint', function () {
    this.timeout(0);

    beforeEach(function () {
        this.Match = new _MatchEndpoint2.default(defaultConfig);
    });

    describe('.get', function () {
        it('should have the correct payload #1', function () {
            const { id } = _mocks2.default.match;
            const { payload } = this.Match.get(id);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'match',
                endpoint: `matches/${id}`,
                query: [],
                region: ''
            });
        });
    });

    describe('.timeline', function () {
        it('should have the correct payload #1', function () {
            const { id } = _mocks2.default.match;
            const { payload } = this.Match.timeline(id);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'match',
                endpoint: `timelines/by-match/${id}`,
                query: [],
                region: ''
            });
        });
    });
});