'use strict';

var _chai = require('chai');

var _TestUtils = require('../../TestUtils');

var _TestUtils2 = _interopRequireDefault(_TestUtils);

var _SummonerEndpoint = require('../../../lib/Endpoints/SummonerEndpoint');

var _SummonerEndpoint2 = _interopRequireDefault(_SummonerEndpoint);

var _mocks = require('../../mocks');

var _mocks2 = _interopRequireDefault(_mocks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { kaynInstance, defaultConfig } = _TestUtils2.default;

const { kayn, REGIONS, METHOD_TYPES } = kaynInstance;


describe('SummonerEndpoint', function () {
    this.timeout(0);

    beforeEach(function () {
        this.Summoner = new _SummonerEndpoint2.default(defaultConfig);
    });

    describe('.by.name', function () {
        it('should have the correct payload #1', function () {
            const { payload } = this.Summoner.by.name(_mocks2.default.summoner.Contractz.name);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'summoner',
                endpoint: `summoners/by-name/${_mocks2.default.summoner.Contractz.name}`,
                query: [],
                region: ''
            });
        });

        it('should encode the summoner name', function () {
            const { payload } = this.Summoner.by.name(_mocks2.default.summoner.ShouldEncode);
            const { endpoint } = payload;
            (0, _chai.expect)(endpoint).to.equal('summoners/by-name/%5Bobject%20Object%5D');
        });
    });

    describe('.by.id', function () {
        it('should have the correct payload #1', function () {
            const { payload } = this.Summoner.by.id(_mocks2.default.summoner.Contractz.id);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'summoner',
                endpoint: `summoners/${_mocks2.default.summoner.Contractz.id}`,
                query: [],
                region: ''
            });
        });
    });

    describe('.by.accountID', function () {
        it('should have the correct payload #1', function () {
            const { payload } = this.Summoner.by.accountID(_mocks2.default.summoner.Contractz.accountId);
            (0, _chai.expect)(payload).to.deep.equal({
                method: 'GET',
                serviceName: 'summoner',
                endpoint: `summoners/by-account/${_mocks2.default.summoner.Contractz.accountId}`,
                query: [],
                region: ''
            });
        });
    });
});