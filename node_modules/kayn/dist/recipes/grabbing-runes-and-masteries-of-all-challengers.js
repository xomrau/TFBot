'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Transforms a list of challenger players into their runes & masteries (lol).

const main = (() => {
  var _ref = _asyncToGenerator(function* (kayn) {
    const challengerLeagueDTO = yield kayn.Challenger.list('RANKED_SOLO_5x5');
    const { entries } = challengerLeagueDTO;
    const challengerRunes = yield Promise.all(entries.slice().map((() => {
      var _ref2 = _asyncToGenerator(function* (player) {
        return yield kayn.Runes.by.summonerID(player.playerOrTeamId);
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    })()));
    const challengerMasteries = yield Promise.all(entries.slice().map((() => {
      var _ref3 = _asyncToGenerator(function* (player) {
        return yield kayn.Masteries.by.summonerID(player.playerOrTeamId);
      });

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    })()));
    console.log(challengerRunes);
    console.log();
    console.log(challengerMasteries);
  });

  return function main(_x) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = main;