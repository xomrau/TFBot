'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Grabs the champion mastery DTOs out of a set of champion ids from a specific player.

// Let's pretend that these IDs are the IDs of all the supports in the game.
const championIDs = [1, 2, 3, 4, 5, 6];
const printError = statusCode => console.warn(statusCode);

const main = (() => {
  var _ref = _asyncToGenerator(function* (kayn) {
    kayn.Summoner.by.name('Contractz').then((() => {
      var _ref2 = _asyncToGenerator(function* ({ id }) {
        // ChampionMastery.get takes in a summoner id
        // and returns a function that takes in a champion id.
        const getChampionFromContractz = kayn.ChampionMastery.get(id);
        const mapFn = (() => {
          var _ref3 = _asyncToGenerator(function* (championID) {
            return yield getChampionFromContractz(championID);
          });

          return function mapFn(_x3) {
            return _ref3.apply(this, arguments);
          };
        })();
        const supportCMDTOs = yield Promise.all(championIDs.map(mapFn));
        console.log(supportCMDTOs);
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    })()).catch(printError);
  });

  return function main(_x) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = main;